_CAMBIOS A PLICAR PARA USAR LA CONEXIO AL MES Y SALIR DE LA SIMULACION LOCAL

A continuación verás exactamente los bloques de código que debes reemplazar en tu aplicación para pasar de la simulación local (que usa SN “validados” y responde con PASS/FAIL ficticio) al uso real con mes.send_message(...).

Para mayor claridad, aquí tienes 3 secciones:

Bloque a quitar/comentar (simulación local).
Bloque a poner (uso real con mes.send_message).
Aplícalo en cada uno de los 3 métodos: _do_check_sn1, check_sn2 y ejecutar_bc_mp.

------------------------------------------------------------
def _do_check_sn1(self):
    # Lee el valor actual de SN1
    current = self.housing_entry.get().strip()
    if not current:
        # Si está vacío, no se valida nada
        self.status_circle_housing.config(foreground="gray")
        return

    if len(current) >= 25:
        # Obtenemos parámetros de MES
        ip = mes.setting.get("ip", "")
        port = int(mes.setting.get("port", "0"))
        process = mes.setting.get("process", "")
        station = mes.setting.get("station", "STATION1")

        # Construimos el mensaje BREQ
        breq_sn1 = f"BREQ|process={process}|station={station}|id={current}"

        # Log en chat_text
        self._log_message(f"To SIM: {breq_sn1}")

        # Enviamos mensaje real a MES
        try:
            resp = mes.send_message(ip, port, breq_sn1)
        except TimeoutError:
            # Si hay timeout, mostramos popup, pintamos en rojo, y deshabilitamos SN2
            self._log_message("From SIM: Tiempo de conexion agotado.")
            self.show_timeout_popup()
            self.status_circle_housing.config(foreground="red")
            self.housing_entry.configure(style="Error.TEntry")
            self.pcb_entry.config(state='disabled')
            return

        # Log de la respuesta
        self._log_message(f"From SIM: {resp}")

        # Chequeamos si es PASS (BCNF|id=<sn1>|status=PASS)
        if self.check_breq_response(resp, current):
            # Pinta en verde Housing
            self.status_circle_housing.config(foreground="green")
            self.housing_entry.configure(style="Valid.TEntry")

            # Habilitar PCB
            self.pcb_entry.config(state='normal')
            self.pcb_entry.focus_set()

        else:
            # FAIL => popup y pintar en rojo
            self.show_fail_popup()
            self.status_circle_housing.config(foreground="red")
            self.housing_entry.configure(style="Error.TEntry")
            self.pcb_entry.config(state='disabled')

------------------------------------------------------------
def check_sn2(self, event):
    current = self.pcb_entry.get().strip()
    if not current:
        self.status_circle_pcb.config(foreground="gray")
        return

    if len(current) >= 25:
        ip = mes.setting.get("ip", "")
        port = int(mes.setting.get("port", "0"))
        process = mes.setting.get("process", "")
        station = mes.setting.get("station", "STATION1")

        breq_sn2 = f"BREQ|process={process}|station={station}|id={current}"

        self._log_message(f"To SIM: {breq_sn2}")

        try:
            resp = mes.send_message(ip, port, breq_sn2)
        except TimeoutError:
            self._log_message("From SIM: Tiempo de conexion agotado.")
            self.show_timeout_popup()
            self.status_circle_pcb.config(foreground="red")
            self.pcb_entry.configure(style="Error.TEntry")
            return

        self._log_message(f"From SIM: {resp}")

        if self.check_breq_response(resp, current):
            # SN2 es PASS => pinta en verde
            self.status_circle_pcb.config(foreground="green")
            self.pcb_entry.configure(style="Valid.TEntry")

            # Ejecutamos la hermanación (BCMP)
            self.ejecutar_bc_mp()
        else:
            self.show_fail_popup()
            self.status_circle_pcb.config(foreground="red")
            self.pcb_entry.configure(style="Error.TEntry")
------------------------------------------------------------
def ejecutar_bc_mp(self):
    sn1 = self.housing_entry.get().strip()
    sn2 = self.pcb_entry.get().strip()

    ip = mes.setting.get("ip", "")
    port = int(mes.setting.get("port", "0"))
    process = mes.setting.get("process", "")
    station = mes.setting.get("station", "STATION1")

    bcmp_msg = f"BCMP|process={process}|station={station}|id={sn2}|pid={sn1}|status=PASS"
    self._log_message(f"To SIM: {bcmp_msg}")

    try:
        resp = mes.send_message(ip, port, bcmp_msg)
    except TimeoutError:
        self._log_message("From SIM: Tiempo de conexion agotado.")
        self.show_timeout_popup()
        return

    self._log_message(f"From SIM: {resp}")

    # Validamos si la respuesta es BACK|id=<sn1>|status=PASS
    if self.check_back_response(resp, sn1):
        self._log_message("Hermanación exitosa.")
        self.show_pass_popup(auto_close_ms=3000)
    else:
        self._log_message("Hermanación FALLÓ.")
        self.show_fail_popup()

    # Reseteamos luego de un tiempo (configurado en mes.setting)
    periodo = int(mes.setting.get("periodo", 10)) * 1000
    self.after(periodo, self.reset_entries)
------------------------------------------------------------

